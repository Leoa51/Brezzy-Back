generator client {
  provider      = "prisma-client-js"
  output        = "../src/prisma/client"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("POSTEGRE_DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  role      String   @default("user")
  username  String   @unique
  name      String
  lastname  String
  mail      String   @unique
  password  String
  bio       String   @default("") @db.VarChar(500)
  pdp       String   @default("")
  langage   String   @default("fr")
  isBlocked Boolean  @default(false)
  nb_Report Int      @default(0)
  createdAt DateTime @default(now())

  // Relations de suivi
  followers Follow[] @relation("Followed")
  following Follow[] @relation("Following")

  // Relations de posts
  posts   Post[] @relation("UserPosts")
  likedBy Post[] @relation("LikedPosts")

  // Relations de tags
  createdTags Tag[] @relation("CreatedTags")
  taggedIn    Tag[] @relation("UserTags")

  // Relations de reports
  reportsReceived ReportUser[] @relation("ReportsReceived")
  reportsMade     ReportUser[] @relation("ReportsMade")
  postReportsMade ReportPost[] @relation("PostReportsMade")
}

model Follow {
  id          Int  @id @default(autoincrement())
  follower    User @relation("Following", fields: [followerId], references: [id], onDelete: Cascade)
  followerId  Int
  following   User @relation("Followed", fields: [followingId], references: [id], onDelete: Cascade)
  followingId Int

  @@unique([followerId, followingId])
}

model Post {
  id         Int      @id @default(autoincrement())
  message    String   @db.VarChar(2000)
  picture    String?  @default("")
  video      String?  @default("")
  likeNumber Int      @default(0)
  nb_Report  Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  authorId Int
  author   User @relation("UserPosts", fields: [authorId], references: [id], onDelete: Cascade)

  likedBy User[] @relation("LikedPosts")

  tags Tag[] @relation("PostTags")

  parentPostId Int?
  parentPost   Post?  @relation("PostComments", fields: [parentPostId], references: [id], onDelete: Cascade)
  comments     Post[] @relation("PostComments")

  reports ReportPost[]
}

model Tag {
  id          Int      @id @default(autoincrement())
  name        String   @unique @db.VarChar(50)
  description String?  @default("") @db.VarChar(200)
  usageCount  Int      @default(0)
  createdAt   DateTime @default(now())

  createdById Int?
  createdBy   User?  @relation("CreatedTags", fields: [createdById], references: [id], onDelete: SetNull)
  posts       Post[] @relation("PostTags")
  users       User[] @relation("UserTags")
}

model ReportUser {
  id     Int      @id @default(autoincrement())
  reason String
  date   DateTime @default(now())

  userId Int
  user   User @relation("ReportsReceived", fields: [userId], references: [id], onDelete: Cascade)

  reportedById Int
  reportedBy   User @relation("ReportsMade", fields: [reportedById], references: [id], onDelete: Cascade)

  @@unique([userId, reportedById])
}

model ReportPost {
  id     Int      @id @default(autoincrement())
  reason String
  date   DateTime @default(now())
  postId Int
  post   Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  reportedById Int
  reportedBy   User @relation("PostReportsMade", fields: [reportedById], references: [id], onDelete: Cascade)

  @@unique([postId, reportedById]) // Un utilisateur ne peut reporter le mÃªme post qu'une fois
}
